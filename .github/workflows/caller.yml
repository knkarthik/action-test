name: caller

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.run_id }}
#   cancel-in-progress: false
on:
  push:
    branches-ignore:
      - main
  pull_request:

jobs:
  fe_deploy:
    runs-on: ubuntu-latest
    env:
      JSON: ${{ toJSON(github) }}
      NEEDS: ${{ toJSON(needs) }}
      # JOB: ${{ toJSON(job) }}
      GH_TOKEN: ${{ secrets.READ_CLEARSPELL_VARIABLES }}
    steps:
      - run: echo $JSON
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Reject old waiting deploy jobs
        uses: actions/github-script@v7
        env:
          WORKFLOW_REF: ${{ github.workflow_ref }}
          PROD_ENV_ID: 1821339418
        with:
          github-token: ${{ secrets.SECRET }}
          script: |
              const { data } = await github.rest.actions.listRepoWorkflows({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const prodWorkflow = data.workflows.find(workflow => process.env.WORKFLOW_REF.includes(workflow.path));
              if (prodWorkflow) {
                const { data: runsData } = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: prodWorkflow.id,
                  status: "waiting"
                });
                if (runsData.total_count > 0) {
                  const { data: reviewData } = await github.rest.actions.reviewPendingDeploymentsForRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: runsData.workflow_runs[0].id,
                    environment_ids: [parseInt(process.env.PROD_ENV_ID,10)],
                    state: 'rejected',
                    comment: 'Auto-rejected because of a new deploy'
                  });
                  console.log(reviewData);
                }
              }
  
  deploy:
    runs-on: ubuntu-latest
    environment: test
    needs: [fe_deploy]
    env:
      JSON: ${{ toJSON(github) }}
      NEEDS: ${{ toJSON(needs) }}
      # JOB: ${{ toJSON(job) }}
      GH_TOKEN: ${{ secrets.READ_CLEARSPELL_VARIABLES }}
    steps:
      - run: echo $JSON && sleep 15

  # test-job:
  #   runs-on: ubuntu-latest
  #   needs: ['call']
  #   if: ${{ failure() && needs.call.result == 'failure' }}
  #   env:
  #     JSON: ${{ toJSON(github) }}
  #     NEEDS: ${{ toJSON(needs) }}
  #     # JOB: ${{ toJSON(job) }}
  #     GH_TOKEN: ${{ secrets.READ_CLEARSPELL_VARIABLES }}
  #   steps:
  #     - run: echo $JSON
  #     - run: echo $NEEDS
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '20.x'
  #     - run: npm install @slack/web-api
  #     - name: List Failed Jobs
  #       id: list-failed-jobs
  #       uses: actions/github-script@v7
  #       env:
  #         branch: ${{ github.ref_name }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const { WebClient } = require("@slack/web-api");
  #           const { data } = await github.rest.actions.listJobsForWorkflowRun({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             run_id: context.runId,
  #           });

  #           console.log(context);

  #           const failedJobs = data.jobs.filter(job => job.conclusion === 'failure');
  #           const failedJobLinks = failedJobs.map(job => `<${job.html_url}|${job.name}>`);
  #           console.log(context)
  #           console.log(context.ref)
  #           console.log('---')
  #           console.log(context.ref_name)
            
  #           const workflowHeader = {
  #             type: 'section',
  #             text: {
  #               type: 'mrkdwn',
  #               text: `<${context.payload.repository.html_url}/actions/runs/${context.runId}|Workflow run> failed for *${process.env.branch}* :red_circle:`,
  #             },
  #           };
  #           const failedJobBlocks = [{
  #             type: 'section',
  #             fields: [
  #               {
  #                 type: 'mrkdwn',
  #                 text: '*Failed jobs*'
  #               },
  #               {
  #                 type: 'mrkdwn',
  #                 text: `${failedJobLinks.join(', ')}`
  #               }
  #             ],
  #           }];
  #           const authorSection = {
  #             "type": "section",
  #             "fields": [
  #               {
  #                 "type": "mrkdwn",
  #                 "text": "*Author*"
  #               },
  #               {
  #                 "type": "mrkdwn",
  #                 "text": `${context.actor}`
  #               }
  #             ]
  #           };
  #           const sha = 'a40c4a66cc52e7f1d20a5849c16966bd8fef3395'
  #           const datadogSection = {
  #             type: 'section',
  #             text: {
  #               type: 'mrkdwn',
  #               text: `<https://app.datadoghq.com/ci/test-commit/github.com%2Ffinanceit%2Ffinanceit/financeit-ci/master/${sha}?&env=test&index=citest|Datadog>`,
  #             },
  #           };
  #           const blocks = [
  #             workflowHeader,
  #             authorSection,
  #             ...failedJobBlocks,
  #             datadogSection
  #           ]; 
            
      # - name: Send Slack notification
      #   uses: actions/github-script@v7
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      #     CHANNEL_ID: ${{ secrets.SLACK_CHANNEL }}
      #     message: ${{ steps.list-failed-jobs.outputs.result }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     result-encoding: string
      #     script: |
      #       const { WebClient } = require("@slack/web-api");
      #       const client = new WebClient(process.env.SLACK_TOKEN);
      #       console.log(process.env.message)
      #       try {
      #         const result = await client.chat.postMessage({
      #           channel: process.env.CHANNEL_ID,
      #           text: "Workflow failed!",
      #           blocks: process.env.message,
      #           unfurl_links: false
      #         });
      #         }
      #         catch (error) {
      #           console.error(error);
      #           return true;
      #         }
      # - name: Send Slack Notification
      #   uses: archive/github-actions-slack@v2.8.0
      #   id: notify
      #   env:
      #     run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #     commit_url: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
      #   with:
      #     slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     slack-channel: ${{ secrets.SLACK_CHANNEL }}
      #     # slack-optional-blocks: ${{ steps.list-failed-jobs.outputs.result }}
      #     slack-text: üî¥ <${{ env.run_url }}|${{ github.job }}> *job failed* for commit  <${{ env.commit_url }}|${{ github.sha}}> by author ${{ github.actor }}‚ÄºÔ∏è
      #     slack-optional-icon_emoji: ":fire:"
      #     slack-optional-unfurl_links: false
      # - name: Send Slack Notification
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     channel-id: ${{ secrets.SLACK_CHANNEL }}
      #     payload: ${{ steps.list-failed-jobs.outputs.result }}
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
