name: Production Deploy


on:
  push:
    branches:
      - "test-skip"

  workflow_dispatch: 
    inputs:
      deploy:
        description: "Check this to perform production deploy"
        type: boolean

jobs:
  
  build-and-test:
    if: ${{ github.event_name == 'push' }}
    secrets: inherit
    uses: ./.github/workflows/build-and-test.yml
    with:
      concurrency_key: ${{ github.run_id }}

  build-base:
    # if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true' && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    concurrency: 
     group: production-build-base-${{ github.run_id }}
     cancel-in-progress: false
    steps:
      - run: echo '${{ toJSON(github) }}' && exit 1

  production-ember-build:
    needs: [build-base]
    # if: ${{ contains(needs.*.result, 'success') || (always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && github.event.inputs.deploy == 'true') }}
    # if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || github.event.inputs.deploy == 'true' }}
    environment: 
      name: prod-ember
    concurrency: 
      group: production-ember-build-${{ github.run_id }}
      cancel-in-progress: false
    runs-on: ubuntu-latest
    env:
      JSON: ${{ toJSON(needs) }}
    steps:
      - run: echo "deploying" && sleep 5

  # trigger-auto-deploy:
  #   needs: [build-and-test,build-base,production-ember-build]
  #   if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || github.event.inputs.deploy == 'true' }}
  #   runs-on: ubuntu-latest
  #   concurrency: 
  #    group: production-build-base-${{ github.run_id }}
  #    cancel-in-progress: false
  #   env:
  #     prod_env_id: 670156242
  #     GH_TOKEN: ${{ secrets.SECRET }}
  #   steps:
  #     - run: echo '${{ toJSON(github) }}'
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2
  #     - name: Auto approve production deployment job ðŸš€
  #       run: |
  #         # we can cancel all other prod-deploy workflows safely
  #         # as no other production-deploy jobs are running now
  #         echo "waiting runs"
  #         gh run list --branch ${{ github.ref_name }} --workflow "${{ github.workflow }}" \
  #           --event push \
  #           --status waiting
  #         waiting_jobs=(gh run list --branch ${{ github.ref_name }} --workflow "${{ github.workflow }}" \
  #           --event push \
  #           --status waiting)
  #         gh api --method POST \
  #           "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/pending_deployments" \
  #           -F "environment_ids[]=${{ env.prod_env_id }}" \
  #           -f state='approved' \
  #           -f comment='Auto-approved' 

  production-deploy:
    needs: [build-and-test,build-base,production-ember-build]
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && !contains(needs.*.result, 'skipped')  || github.event.inputs.deploy == 'true' }}
    # if: ${{ contains(needs.*.result, 'success') || (always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && github.event.inputs.deploy == 'true') }}
    runs-on: ubuntu-latest
    environment: 
      name: prod
      url: "${{ format('{0}{1}{2}', 'https://', steps.prod-deploy.outputs.URL, '.com') }}"
    concurrency: 
      group: production-deploy
      cancel-in-progress: false
    env:
      GH_TOKEN: ${{ secrets.SECRET }}
      JSON: ${{ toJSON(needs) }}
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4
      # - name: Cancel all other in_progress prod workflow
      #   if: github.event.inputs.deploy == 'true'
      #   run: |
      #     echo "Only this job is deploying to prod now"
      #     # we can cancel all other prod-deploy workflows safely
      #     # as no other production-deploy jobs are running now
      #     this_run=${{ github.run_number }}
      #     gh run list --branch test-skip --workflow "${{ github.workflow }}" \
      #       --event push \
      #       --limit 10 \
      #       --json status,databaseId \
      #       | jq -r --arg this_run "$this_run" '.[] | select((.status == "in_progress" or .status == "queued") and .databaseId != ($this_run | tonumber)) | .databaseId' \
      #       | xargs -I {} gh api --method POST /repos/${{github.repository}}/actions/runs/{}/force-cancel
      - name: prod deploy
        id: prod-deploy
        run: echo "URL=prod" >> $GITHUB_OUTPUT && sleep 10
