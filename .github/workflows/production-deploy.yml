name: Production Deploy


on:
  push:
    branches:
      - "main"

  workflow_dispatch: 
    inputs:
      deploy:
        description: "Check this to perform production deploy"
        type: boolean

jobs:
  
  build-and-test:
    if: ${{ github.event_name == 'push' }}
    secrets: inherit
    uses: ./.github/workflows/build-and-test.yml
    with:
      concurrency_key: ${{ github.run_id }}


  production-ember-build:
    # if: always() && !failure() && !cancelled() && github.ref_name == 'main' && (inputs.deploy || github.event_name == 'push' )
    if: ${{ !cancelled() }}
    needs: [build-and-test]
    concurrency: 
      group: production-ember-build-${{ github.run_id }}
      cancel-in-progress: false
    runs-on: ubuntu-24.04
    steps:
    - name: Dump GitHub context
      id: github_context_step
      env:
        JSON: ${{ toJSON(github) }}
        GH_TOKEN: ${{ github.token }}
      run: echo $JSON
    - run: echo "deploying" && gh variable list && exit 1
    outputs:
      skip_prod_deploy: 'false'
      ember_build_run: 'true'

  build-prod-image:
    if: always() && !failure() && !cancelled() && github.ref_name == 'main' && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false')
    needs: [production-ember-build]
    concurrency: 
      group: build-prod-image-${{ github.run_id }}
      cancel-in-progress: false
    runs-on: ubuntu-24.04
    steps:
      - name: Dump needs context
        env:
          JSON: ${{ toJSON(needs) }}
        run: echo $JSON
      - run: echo "build image" && exit 1

  production-deploy:
    if: always() && !failure() && !cancelled() && github.ref_name == 'main' && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false')
    needs: [production-ember-build]
    runs-on: ubuntu-24.04
    concurrency: 
      group: production-deploy
      cancel-in-progress: false
    steps:
      - name: Dump needs context
        env:
          JSON: ${{ toJSON(needs) }}
        run: echo $JSON
      - name: prod deploy
        id: prod-deploy
        run: echo "URL=prod" >> $GITHUB_OUTPUT


  deploy-eks:
    if: always() && !failure() && !cancelled() && github.ref_name == 'main' && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false')
    # if: ${{ (needs.build-prod-image.result == 'success' && needs.production-deploy.result == 'success') && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false') }}
    needs: [build-prod-image, production-deploy]
    runs-on: ubuntu-24.04
    concurrency: 
      group: production-deploy-eks
      cancel-in-progress: false
    steps:
      - name: Dump needs context
        env:
          JSON: ${{ toJSON(needs) }}
        run: echo $JSON
      - name: eks deploy
        run: echo "eks deploy" && sleep 1

  notify-on-failure:
    # if: ${{ (needs.production-deploy.result == 'success' && needs.deploy-eks.result == 'success') && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false') }}
    if: failure()
    needs: [deploy-eks]
    runs-on: ubuntu-24.04
    steps:
      - name: Dump needs context
        env:
          JSON: ${{ toJSON(needs) }}
        run: echo $JSON
      - name: List failed jobs
        id: list-failed-jobs
        uses: actions/github-script@v7
        env:
          branch: ${{ github.ref_name }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const slackID = '${{ steps.get_slack_id.outputs.slack_id }}';
            const { data } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
              per_page: 50,
            });
            console.log(context.payload)
            const failedJobs = data.jobs.filter(job => job.conclusion === 'failure');
            const failedJobLinks = failedJobs.map(job => `<${job.html_url}|${job.name}>`);
            const workflowHeader = {
              type: 'section',
              text: {
                type: 'mrkdwn',
                text: `<${context.payload.repository.html_url}/actions/runs/${context.runId}|Workflow run> failed for *${process.env.branch}* :red_circle:`,
              },
            };
            const failedJobBlocks = [{
              type: 'section',
              fields: [
                {
                  type: 'mrkdwn',
                  text: '*Failed jobs*'
                },
                {
                  type: 'mrkdwn',
                  text: `${failedJobLinks.join(', ')}`
                }
              ],
            }];
            const authorAndCommitSection = {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Author*"
                },
                {
                  type: "mrkdwn",
                  text: "*Commit*"
                },
                {
                  "type": "mrkdwn",
                  "text": `<@${slackID}>`
                },
                {
                  type: "mrkdwn",
                  text: `<${context.payload.head_commit?.url || 'https://github.com/financeit/financeit/commits/master/'}|${context.payload.head_commit?.message?.split('\n')[0] || 'Manual deploy'}>`
                }
              ]
            };
            const workflowAndDatadogSection = {
              type: 'section',
              fields: [
                {
                  type: "mrkdwn",
                  text: "*Test Metrics*"
                },
                {
                  type: "mrkdwn",
                  text: "*Workflow*"
                },
                {
                  type: 'mrkdwn',
                  text: `<https://app.datadoghq.com/ci/test-commit/github.com%2Ffinanceit%2Ffinanceit/financeit-ci/master/${context.sha}?&env=test&index=citest|Datadog>`,
                },
                {
                  type: 'mrkdwn',
                  text: `${context.workflow}`,
                }],
            };
            const blocks = [
              workflowHeader,
              authorAndCommitSection,
              ...failedJobBlocks,
              workflowAndDatadogSection
            ];
            console.log('Slack Blocks:', JSON.stringify(blocks));

            return blocks;

  invalidate-cache:
    # if: ${{ (needs.production-deploy.result == 'success' && needs.deploy-eks.result == 'success') && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false') }}
    if: always() && !failure() && !cancelled() && github.ref_name == 'main' && needs.production-ember-build.outputs.ember_build_run == 'true' && (inputs.deploy || needs.production-ember-build.outputs.skip_prod_deploy == 'false')
    needs: [production-deploy,deploy-eks]
    runs-on: ubuntu-24.04
    concurrency: 
      group: production-deploy-eks
      cancel-in-progress: false
    steps:
      - name: Dump needs context
        env:
          JSON: ${{ toJSON(needs) }}
        run: echo $JSON
      - name: eks deploy
        run: echo "eks deploy" && sleep 1
  
