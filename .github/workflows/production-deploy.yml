name: Production Deploy


on:
  push:
    branches:
      - "test-skip"

  workflow_dispatch: 
    inputs:
      deploy:
        description: "Check this to perform production deploy"
        type: boolean

jobs:
  
  build-and-test:
    if: ${{ github.event_name == 'push' }}
    secrets: inherit
    uses: ./.github/workflows/build-and-test.yml
    with:
      concurrency_key: ${{ github.run_id }}

  build-base:
    # if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true' && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    concurrency: 
     group: production-build-base-${{ github.run_id }}
     cancel-in-progress: false
    steps:
      - run: echo '${{ toJSON(github) }}' && sleep 1

  production-ember-build:
    needs: [build-base]
    # if: ${{ contains(needs.*.result, 'success') || (always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && github.event.inputs.deploy == 'true') }}
    # if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || github.event.inputs.deploy == 'true' }}
    environment: 
      name: prod-ember
    concurrency: 
      group: production-ember-build-${{ github.run_id }}
      cancel-in-progress: false
    runs-on: ubuntu-latest
    env:
      JSON: ${{ toJSON(needs) }}
    steps:
      - run: echo "deploying" && exit 0
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@a0585ff9904b77d046192a7846e59783d6ea287b #v37
        with:
          escape_json: false
          quotepath: false
          files_yaml: |
            spec:
              - '.github/**'
              - '!.github/workflows/production-deploy.yml'
              - spec/**
              - spec_acceptance/**
            ember:
              - direct/**
              - partner/**
              - financeit-components/**
              - yarn.lock
              - app/assets/**
      - name: echo changed files
        run: |
          ember_any_changed=${{ steps.changed-files.outputs.ember_any_changed }}
          echo "Any frontend files got changed is $ember_any_changed"
          spec_any_changed=${{ steps.changed-files.outputs.spec_any_changed }}
          echo "Any spec files got changed is $spec_any_changed"
          spec_only_changed=${{ steps.changed-files.outputs.spec_only_changed }}
          echo "only spec files got changed is $spec_only_changed"
          echo "Modified files are ${{ steps.changed-files.outputs.all_modified_files }}"
          echo "all output: ${{ toJson(steps.changed-files.outputs) }}"
          echo "spec_all_modified files: ${{ steps.changed-files.outputs.spec_all_modified_files }}"
      - name: spec_only_changed changed
        if: ${{ steps.changed-files.outputs.spec_only_changed == 'true' && contains(steps.changed-files.outputs.spec_all_modified_files, 'production-deploy') }}
        run: echo "${{ steps.changed-files.outputs.spec_all_modified_files }}"
      - name: spec_any_changed changed
        if: ${{ steps.changed-files.outputs.spec_any_changed  == 'true'}}
        run: echo "${{ steps.changed-files.outputs.spec_all_modified_files }}"
      - name: ember_only_changed
        if: ${{ steps.changed-files.outputs.ember_only_changed == 'true' }}
        run: echo "${{ steps.changed-files.outputs.ember_all_modified_files }}"
      - name: ember_any_changed
        if: ${{ steps.changed-files.outputs.ember_any_changed == 'true' }}
        run: echo "${{ steps.changed-files.outputs.ember_all_modified_files }}"
  # trigger-auto-deploy:
  #   needs: [build-and-test,build-base,production-ember-build]
  #   if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') || github.event.inputs.deploy == 'true' }}
  #   runs-on: ubuntu-latest
  #   concurrency: 
  #    group: production-build-base-${{ github.run_id }}
  #    cancel-in-progress: false
  #   env:
  #     prod_env_id: 670156242
  #     GH_TOKEN: ${{ secrets.SECRET }}
  #   steps:
  #     - run: echo '${{ toJSON(github) }}'
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2
  #     - name: Auto approve production deployment job ðŸš€
  #       run: |
  #         # we can cancel all other prod-deploy workflows safely
  #         # as no other production-deploy jobs are running now
  #         echo "waiting runs"
  #         gh run list --branch ${{ github.ref_name }} --workflow "${{ github.workflow }}" \
  #           --event push \
  #           --status waiting
  #         waiting_jobs=(gh run list --branch ${{ github.ref_name }} --workflow "${{ github.workflow }}" \
  #           --event push \
  #           --status waiting)
  #         gh api --method POST \
  #           "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/pending_deployments" \
  #           -F "environment_ids[]=${{ env.prod_env_id }}" \
  #           -f state='approved' \
  #           -f comment='Auto-approved' 

  production-deploy:
  # doesn't deploy if only build-base failed (auto/manual)
  # doesn't deploy if only ember failed (auto/manual)
  # doesn't deploy if test+ember failed (auto/manual)
  # doesn't deploy if only test failed (auto)
  # deploy if only test failed (manual)
    needs: [build-and-test,build-base,production-ember-build]
    # if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && !contains(needs.*.result, 'skipped')  || github.event.inputs.deploy == 'true' }}
    if: >-
        ${{ always() && 
        (needs.build-and-test.result == 'success' && needs.build-base.result == 'success' && needs.production-ember-build.result == 'success') ||
        (needs.build-base.result == 'success' && needs.production-ember-build.result == 'success') && github.event.inputs.deploy == 'true' }}
    runs-on: ubuntu-latest
    environment: 
      name: prod
      url: "${{ format('{0}{1}{2}', 'https://', steps.prod-deploy.outputs.URL, '.com') }}"
    concurrency: 
      group: production-deploy
      cancel-in-progress: false
    env:
      GH_TOKEN: ${{ secrets.SECRET }}
      JSON: ${{ toJSON(needs) }}
    steps:
      
      - name: prod deploy
        id: prod-deploy
        run: echo "URL=prod" >> $GITHUB_OUTPUT && sleep 1
