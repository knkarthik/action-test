name: Build

on:
  workflow_call:
# concurrency: 
#   group: ${{ github.head_ref || github.run_id }}
#   cancel-in-progress: true
defaults:
  run:
   shell: bash -l {0}
jobs:
  base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: "[Push] Get commit message"
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo "push_commit_message=$(git log --format=%B -n 1 HEAD)" >> $GITHUB_OUTPUT

        # If this workflow was triggered by a pull request (open or synchronize!) then resolve the commit message from HEAD^2
        # It is stored in output steps, to be referenced with ${{ steps.pr_get_commit_message.outputs.pr_commit_message }}
      - name: "[Pull Request] Get commit message"
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo "pr_commit_message=$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_OUTPUT

    # Finally we want to make the commit message available to other jobs. This can be done with job-level outputs
    # However as we do not know whether the commit message was set in Push or Pull Request event we need to do some
    # bash magic to resolve the one or the other
    #
    # For **Pull Request** events this will resolve to something like "$( [ -z "commit message pr" ] && echo "" || echo "commit message pr" )" which then resolves to just "commit message pr"
    #
    # For **Push** events this will resolve to something like "$( [ -z "" ] && echo "commit message push"  || echo "" )" which then resolves to just "commit message push"
    outputs:
        commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  build:
    runs-on: ubuntu-latest
    needs: [base]
    steps:
      - name: "[push] Dump GitHub"
        if: github.event_name == 'push'
        run: echo '${{ toJSON(github) }}'
      - name: "[pull request] Dump GitHub"
        if: github.event_name == 'pull_request'
        run: echo '${{ toJSON(github) }}'
      - name: "[commit] print if update base"
        if: contains(needs.base.outputs.commit_message, 'update base')
        run: echo 'update base present'
      - name: print head info and others
        run: |
          cat README.md
          echo 'github.head_ref => ${{ github.head_ref }}, head_commit message => ${{ github.event.head_commit.message }}'
          echo 'github.ref_name => ${{ github.ref_name }}, head_commit message => ${{ github.event.head_commit.message }}'
          echo 'head_commit message => ${{ github.event.head_commit.message }}'
          #export PERCY_ENABLE=${{ steps.enable_percy.outputs.PERCY_ENABLE }}
          echo "The percy enabled is $PERCY_ENABLE"
#       - name: Dump job context
#         run: echo '${{ toJSON(job) }}'
#       - name: Dump steps context
#         run: echo '${{ toJSON(steps) }}'
#       - name: Dump runner context
#         run: echo '${{ toJSON(runner) }}'
